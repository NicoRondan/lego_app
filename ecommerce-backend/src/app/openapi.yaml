openapi: 3.0.0
info:
  title: Lego Ecommerce API
  version: 1.0.0
paths:
  /products:
    get:
      summary: List products
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: theme
          schema: { type: string }
        - in: query
          name: minPrice
          schema: { type: number }
        - in: query
          name: maxPrice
          schema: { type: number }
      responses:
        '200': { description: OK }
  /cart:
    get:
      summary: Get current user's cart
      responses:
        '200':
          description: Cart contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cart/items:
    post:
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: { type: integer }
                quantity: { type: integer }
      responses:
        '200': { description: OK }
  /cart/items/{id}:
    patch:
      summary: Update cart item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity: { type: integer }
      responses:
        '200': { description: OK }
    delete:
      summary: Remove cart item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    post:
      summary: Create order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                couponCode: { type: string }
      responses:
        '200': { description: OK }
  /payments/mp/preference:
    post:
      summary: Create Mercado Pago preference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId: { type: integer }
      responses:
        '200': { description: OK }
  /webhooks/mp:
    post:
      summary: Mercado Pago webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentId: { type: string }
                status: { type: string }
      responses:
        '200': { description: OK }

components:
  schemas:
    CartItem:
      type: object
      properties:
        id: { type: integer }
        productId: { type: integer }
        quantity: { type: integer }
        unitPrice:
          type: string
          description: Unit price with two decimal places
          example: '10.00'
        subtotal:
          type: string
          description: Quantity multiplied by unit price with two decimal places
          example: '20.00'
        product:
          type: object
          properties:
            id: { type: integer }
            name: { type: string }
            price:
              type: string
              description: Product price with two decimal places
              example: '10.00'
    Cart:
      type: object
      properties:
        id: { type: integer }
        couponCode:
          type: string
          nullable: true
        subtotal:
          type: number
          format: float
          example: 100.0
        discountTotal:
          type: number
          format: float
          example: 10.0
        items:
  /cart/apply-coupon:
    post:
      summary: Apply a coupon code to the current cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code:
                  type: string
                  description: Uppercase coupon code
      responses:
        '200':
          description: Coupon applied; returns updated cart totals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Coupon invalid or not applicable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cart/coupon:
    delete:
      summary: Remove applied coupon from cart
      responses:
        '200':
          description: Coupon removed; returns updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/coupons:
    get:
      summary: List coupons (admin)
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [active, paused] }
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200': { description: OK }
    post:
      summary: Create coupon (admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponInput'
      responses:
        '201': { description: Created }
  /admin/coupons/{id}:
    put:
      summary: Update coupon (admin)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponInput'
      responses:
        '200': { description: OK }
  /admin/coupons/{id}/usages:
    get:
      summary: List coupon usages (admin)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
          format: float
          description: Grand total after discounts
          example: 90.0
    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
        requestId: { type: string }
    CouponInput:
      type: object
      required: [code, type, value]
      properties:
        code: { type: string }
        type: { type: string, enum: [percent, fixed] }
        value: { type: number, format: float }
        validFrom: { type: string, format: date-time }
        validTo: { type: string, format: date-time }
        minSubtotal: { type: number, format: float }
        maxUses: { type: integer }
        perUserLimit: { type: integer }
        allowedThemes:
          type: array
          items: { type: string }
        disallowProducts:
          type: array
          items: { type: string }
        status: { type: string, enum: [active, paused] }
        stackable: { type: boolean }
